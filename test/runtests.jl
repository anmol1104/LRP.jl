using LRP
using Revise
using Test
using Random

# Traveling Salesman Problem instances
@testset "TSP" begin
    K = 5
    instances = ["att48", "eil101", "ch150", "d198", "a280"]
    methods   = [:cw, :nn, :random, :regret‚ÇÇinit, :regret‚ÇÉinit]
    œá‚Çí  = ObjectiveFunctionParameters(
        d = 0.                          ,
        v = 0.                          ,
        r = 0.                          ,
        c = 0.                          ,
    )
    œá   = ALNSParameters(
        kÃ≤   =   2                       ,
        kÃÖ   =   500                     ,
        kÃ≤‚Çõ  =   80                      ,
        kÃÖ‚Çõ  =   250                     ,   
        Œ®·µ£  =   [
                    :randomnode!    , 
                    :relatedpair!   ,
                    :relatednode!   , 
                    :worstnode!     
                ]                       , 
        Œ®·µ¢  =   [
                    :best!          ,
                    :greedy!        ,
                    :regret‚ÇÇinsert! ,
                    :regret‚ÇÉinsert!
                ]                       ,
        Œ®‚Çõ  =   [
                    :move!              ,
                    :swap!
                ]                       ,
        œÉ‚ÇÅ  =   33                      ,
        œÉ‚ÇÇ  =   9                       ,
        œÉ‚ÇÉ  =   13                      ,
        œâ   =   0.05                    ,
        œÑ   =   0.5                     ,
        ùúÉ   =   0.99975                 ,
        CÃ≤   =   30                      ,
        CÃÖ   =   60                      ,
        ŒºÃ≤   =   0.1                     ,
        ŒºÃÖ   =   0.4                     ,
        œÅ   =   0.1                     ,
        œá‚Çí  =   œá‚Çí  
    )
    for k ‚àà 1:K
        instance = instances[k]
        method = methods[k]
        println("\n Solving $instance")
        G = build(instance)
        s‚Çí= initialsolution(G, œá‚Çí, method)     
        @test isfeasible(s‚Çí)
        S = ALNS(s‚Çí, œá)
        s‚É∞ = S[end]
        @test isfeasible(s‚É∞)
        @test f(s‚É∞, œá‚Çí) ‚â§ f(s‚Çí, œá‚Çí)
    end
    return
end

# Single Depot Vehicle Routing Problem
@testset "SDVRP" begin
    K = 3
    instances = ["m-n101-k10", "tai150a", "cmt10"]
    methods   = [:cw, :regret‚ÇÇinit, :regret‚ÇÉinit]
    œá‚Çí  = ObjectiveFunctionParameters(
        d = 0.                          ,
        v = 10000.                      ,
        r = 0.                          ,
        c = 0.                          ,
    )
    œá   = ALNSParameters(
        kÃ≤   =   2                       ,
        kÃÖ   =   500                     ,
        kÃ≤‚Çõ  =   80                      ,
        kÃÖ‚Çõ  =   250                     ,   
        Œ®·µ£  =   [
                    :randomnode!    , 
                    :relatedpair!   ,
                    :relatednode!   , 
                    :worstnode!     ,  
                    :randomroute!   ,
                    :relatedroute!  ,
                    :worstroute!    ,
                    :randomvehicle! ,  
                ]                       , 
        Œ®·µ¢  =   [
                    :best!          ,
                    :greedy!        ,
                    :regret‚ÇÇinsert! ,
                    :regret‚ÇÉinsert!
                ]                       ,
        Œ®‚Çõ  =   [
                    :move!              ,
                    :swap!
                ]                       ,
        œÉ‚ÇÅ  =   33                      ,
        œÉ‚ÇÇ  =   9                       ,
        œÉ‚ÇÉ  =   13                      ,
        œâ   =   0.05                    ,
        œÑ   =   0.5                     ,
        ùúÉ   =   0.99975                 ,
        CÃ≤   =   30                      ,
        CÃÖ   =   60                      ,
        ŒºÃ≤   =   0.1                     ,
        ŒºÃÖ   =   0.4                     ,
        œÅ   =   0.1                     ,
        œá‚Çí  =   œá‚Çí  
    )
    for k ‚àà 1:K
        instance = instances[k]
        method = methods[k]
        println("\n Solving $instance")
        G = build(instance)
        s‚Çí= initialsolution(G, œá‚Çí, method)     
        @test isfeasible(s‚Çí)
        S = ALNS(s‚Çí, œá)
        s‚É∞ = S[end]
        @test isfeasible(s‚É∞)
        @test f(s‚É∞, œá‚Çí) ‚â§ f(s‚Çí, œá‚Çí)
    end
    return
end