using LRP
using Revise
using Random

let
# Developing an optimal solution 
    # Define instance
    instance = "rand100";
    # Visualize instance
    display(visualize(instance))
    # Define a random number generator
    rng = MersenneTwister(1234);
    # Define inital solution method and build the initial solution
    s‚Çí = initialsolution(rng, instance, :random);
    # Define ALNS parameters
    x = length(s‚Çí.D)+length(s‚Çí.C);
    n = max(500, ceil(x, digits=-(length(digits(x))-1)));
    œá = ALNSParameters(
        kÃ≤   =   n √∑ 25                  ,
        lÃ≤   =   2n                      ,
        lÃÖ   =   5n                      ,
        kÃÖ   =   10n                     ,
        Œ®·µ£  =   [
                    :randomnode!    , 
                    :randomroute!   ,
                    :randomvehicle! ,
                    :randomdepot!   ,
                    :relatednode!   , 
                    :relatedroute!  ,  
                    :relatedvehicle!,
                    :relateddepot!  ,
                    :worstnode!     ,
                    :worstroute!    ,
                    :worstvehicle!  ,
                    :worstdepot!
                ]                       , 
        Œ®·µ¢  =   [
                    :best!          ,
                    :greedy!        ,
                    :regret2!       ,
                    :regret3!
                ]                       ,
        Œ®‚Çó  =   [
                    :move!          ,
                    :intraopt!      ,
                    :interopt!      ,
                    :split!         ,
                    :swap!
                ]                       ,
        œÉ‚ÇÅ  =   33                      ,
        œÉ‚ÇÇ  =   9                       ,
        œÉ‚ÇÉ  =   13                      ,
        œâ   =   0.05                    ,
        œÑ   =   0.5                     ,
        ùúÉ   =   0.99975                 ,
        CÃ≤   =   30                      ,
        CÃÖ   =   60                      ,
        ŒºÃ≤   =   0.1                     ,
        ŒºÃÖ   =   0.4                     ,
        œÅ   =   0.1
    );
    # Run ALNS and fetch best solution
    S = ALNS(rng, œá, s‚Çí);
    s‚É∞ = S[end];          
# Fetch objective function values
    println("Objective function value:")
    println("   Initial: $(f(s‚Çí; penalty=false))")
    println("   Optimal: $(f(s‚É∞ ; penalty=false))")
# Fetch fixed costs
    println("Fixed costs:")
    println("   Initial: $(f(s‚Çí; operational=false, penalty=false))")
    println("   Optimal: $(f(s‚É∞ ; operational=false, penalty=false))")
# Fetch operational costs
    println("Operational costs:")
    println("   Initial: $(f(s‚Çí; fixed=false, penalty=false))")
    println("   Optimal: $(f(s‚É∞ ; fixed=false, penalty=false))")
# Check if the solutions are feasible
    println("Solution feasibility:")
    println("   Initial: $(isfeasible(s‚Çí))")
    println("   Optimal: $(isfeasible(s‚É∞))")
# Optimal solution characteristics
    println("Optimal solution characteristics:")
    println("   Number of depots: $(sum([LRP.isopt(d) for d ‚àà s‚É∞.D]))")
    println("   Number of vehicles: $(sum([LRP.isopt(v) for d ‚àà s‚É∞.D for v ‚àà d.V]))")
    println("   Number of routes: $(sum([LRP.isopt(r) for d ‚àà s‚É∞.D for v ‚àà d.V for r ‚àà v.R]))")
# Visualizations
    # Visualize initial solution
    display(visualize(s‚Çí)) 
    # Visualize best solution
    display(visualize(s‚É∞))
    # Animate ALNS solution search process from inital to best solution
    display(animate(S))
    # Show convergence plot
    display(plotconv(S))
    return
end
